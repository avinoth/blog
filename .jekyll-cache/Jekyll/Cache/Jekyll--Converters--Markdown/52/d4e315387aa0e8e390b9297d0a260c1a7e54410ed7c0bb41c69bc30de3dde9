I"u<p>Postgresql as we know is one of the most matured and robust database out there. It is open source, provides more features than any of its counterparts. It’s also the <a href="http://ocelot.ca/blog/blog/2013/10/14/the-third-most-popular-open-source-dbms/">second</a> most used open source DBMS out there. If you aren’t using it <a href="http://www.postgresql.org/download/">download</a> and get started.</p>

<p>Today we shall look at how to perform trigram indexed searches and trigram combined with postgres full text search. Let’s get started.</p>

<!-- more -->

<h3 id="what-is-trigram">What is trigram?</h3>
<p>An n-gram of three letter sequence is known as trigram. What is ngram then? From wikipedia,</p>

<blockquote>
  <p>In the fields of computational linguistics and probability, an n-gram is a contiguous sequence of n items
from a given sequence of text or speech.</p>
</blockquote>

<p>So what does it mean exactly? It means finding matching words by maintaining variable sequences of characters of a word.</p>

<p>What trigram does is, it splits the given word into three letter sequence at the max and does a similarity search against them in order to find the relevant words to the given word. This comes very useful in terms of autocorrection.</p>

<p>For example, if the available word is <em>google</em>, trigram splits it like</p>
<blockquote>
  <p><code class="highlighter-rouge">g</code>, <code class="highlighter-rouge">go</code>, <code class="highlighter-rouge">goo</code>, <code class="highlighter-rouge">oog</code>, <code class="highlighter-rouge">ogl</code>, <code class="highlighter-rouge">gle</code>, <code class="highlighter-rouge">le</code></p>
</blockquote>

<p>And assume the user searches for <em>googlr</em> a typo for <em>google</em>, for which the trigrams are calculated</p>
<blockquote>
  <p><code class="highlighter-rouge">g</code>, <code class="highlighter-rouge">go</code>, <code class="highlighter-rouge">goo</code>, <code class="highlighter-rouge">oog</code>, <code class="highlighter-rouge">ogl</code>, <code class="highlighter-rouge">glr</code>, <code class="highlighter-rouge">lr</code></p>
</blockquote>

<p>And the similiarity is calculated using the number of trigrams they share, which in our case is quite good. So this comes before. if there is say, another word <em>noogle</em> in the DB which has low similiarity with <em>googlr</em>, would be avoided or shown in the last if the filter value is set lower.</p>

<h4 id="trigram-in-postgresql">Trigram in PostgreSQL</h4>
<p>Postgres supports trigram through an extension called <a href="http://www.postgresql.org/docs/current/static/pgtrgm.html">pg_trgm</a> which is a Postgres supported extension. The feature this extension provides out of the box are,</p>

<ul>
  <li>
    <p>similarity(text1, text2) - Calculates the similarity index between text1 and text2 in the scale of 0 to 1, with 0 being the least similiar.</p>
  </li>
  <li>
    <p>show_trgm(text)- Lists the trigrams that could be calculated from the given text, like we did above.</p>
  </li>
  <li>
    <p>show_limit() - The set filter used by % (look below). Similarity index above this limit is only shown while performing trigram search. The default limit is 0.3.</p>
  </li>
  <li>
    <p>set_limit(real) - Sets the limit to be used by %.</p>
  </li>
  <li>
    <p>text1 % text2 - Returns true if the similarity between text1 and text2 is above the above set limit.</p>
  </li>
  <li>
    <p>text1 &lt;-&gt; text2 - Distance operator, inverse of similarity. Returns the distance between text1 and text2.</p>
  </li>
  <li>
    <p>gist_trgm_ops and gin_trgm_ops- Allows to build GiST or GIN index respectively over a text column for faster similarity search.</p>
  </li>
</ul>

<p>Let’s get started.</p>

<h4 id="sample-app">Sample app</h4>
<p>For the sample app we need a larger DB, so I created one with some 1.5mn rows generated using <a href="https://github.com/stympy/faker">Faker</a> gem. The rows contains varying sentences generated from Latin words, but at the most some 217 words shuffled.</p>

<h4 id="install-pg_trgm-extension">Install pg_trgm extension</h4>
<p>If you haven’t yet, install the <code class="highlighter-rouge">pg_trgm</code> module first. I suggest using a migration to do this instead of doing it directly in psql console. Create a migration and add the below line to it,</p>

<p><code class="highlighter-rouge">execute "create extension pg_trgm;"</code></p>

<p>Now execute the migration. This will install the extension pg_trgm to the postgres in the system.</p>

<h4 id="add-index">Add index</h4>
<p>Next up, add the relevant index to the column that we are going to search. At this point I really can’t recommend GiST or GIN since I’ve had varying performance <a href="https://twitter.com/avinoth_/status/555044180422979584">differences</a> in the past. So, create a migration and add the index you are comfortable with. Below is the code I used,</p>

<p><code class="highlighter-rouge">execute "CREATE INDEX name_similarity_idx ON posts USING gist (name gist_trgm_ops);"</code></p>

<p>Execute the migration and you are good with index now.</p>

<h4 id="now-to-the-search-query">Now to the search query</h4>
<p>We are all set now to do the trigram searches. Add a method in your model to put the search queries and put the below code into it. for example,</p>

<script src="https://gist.github.com/avinoth/b77f6bc23f9372b32429.js"></script>

<p>and we can call this method from the controller like,</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@posts = Post.text_search(params[:query])
</code></pre></div></div>

<p>With all these set, go to the rails app and search with typos and see the magic of similar words showing up.</p>

<p>We can combine this search by generating a separate table containing all the unique words from this column and perform the search there. That would increase the speed of search by a good chunk, but it’s quite useless in the case of fuzzy text search or non-english words search.</p>

<p>There is a gem called <a href="https://github.com/Casecommons/pg_search">pg_search</a> that provides all of the above out of the box, but for some reason the trigram search from this gem is slow for me than the raw SQL.</p>

<p>Anyhow, play around a bit around GIN and GiST indexes, trigram and try working it along with <code class="highlighter-rouge">ts_vectors</code> column and see how you could combine them. See you.</p>
:ET